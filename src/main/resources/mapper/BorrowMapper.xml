<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ambow.first.dao.BorrowMapper" >
  <resultMap id="BaseResultMap" type="com.ambow.first.entity.Borrow" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="book_id" property="bookId" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="borrow_date" property="borrowDate" jdbcType="TIMESTAMP" />
    <result column="s_r_date" property="sRDate" jdbcType="TIMESTAMP" />
    <result column="s_r_time_stamp" property="sRTimeStamp" jdbcType="BIGINT" />
    <result column="status" property="status" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, book_id, user_id, borrow_date, s_r_date, s_r_time_stamp, status
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from borrow
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from borrow
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.ambow.first.entity.Borrow" >
    insert into borrow (id, book_id, user_id,
      borrow_date, s_r_date, s_r_time_stamp,
      status)
    values (#{id,jdbcType=VARCHAR}, #{bookId,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR},
      #{borrowDate,jdbcType=TIMESTAMP}, #{sRDate,jdbcType=TIMESTAMP}, #{sRTimeStamp,jdbcType=BIGINT},
      #{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.ambow.first.entity.Borrow" >
    insert into borrow
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="bookId != null" >
        book_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="borrowDate != null" >
        borrow_date,
      </if>
      <if test="sRDate != null" >
        s_r_date,
      </if>
      <if test="sRTimeStamp != null" >
        s_r_time_stamp,
      </if>
      <if test="status != null" >
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="bookId != null" >
        #{bookId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="borrowDate != null" >
        #{borrowDate,jdbcType=TIMESTAMP},
      </if>
      <if test="sRDate != null" >
        #{sRDate,jdbcType=TIMESTAMP},
      </if>
      <if test="sRTimeStamp != null" >
        #{sRTimeStamp,jdbcType=BIGINT},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ambow.first.entity.Borrow" >
    update borrow
    <set >
      <if test="bookId != null" >
        book_id = #{bookId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="borrowDate != null" >
        borrow_date = #{borrowDate,jdbcType=TIMESTAMP},
      </if>
      <if test="sRDate != null" >
        s_r_date = #{sRDate,jdbcType=TIMESTAMP},
      </if>
      <if test="sRTimeStamp != null" >
        s_r_time_stamp = #{sRTimeStamp,jdbcType=BIGINT},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ambow.first.entity.Borrow" >
    update borrow
    set status = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=VARCHAR}
  </update>

  <update id="updateByBookId" parameterType="com.ambow.first.entity.Borrow">
    update borrow
    set status = #{status,jdbcType=INTEGER}
    where book_id = #{bookId,jdbcType=VARCHAR};

  </update>


  <!--借阅列表的全查带分页-->
  <select id="selectBorrowUserBook" resultType="com.ambow.first.vo.BorrowBookUserVo">
    select w.id borrowId,w.borrow_date borrowDate,w.s_r_date borrowSrdate,w.s_r_time_stamp borrowSrtimeStamp,
    w.status borrowStatus,b.id bookId,b.book_name bookName,b.author_name bookAuthorName,b.press bookPress,
    b.publish_date bookPublishDate,b.info bookInfo,b.status bookStatus,b.num bookNum,b.remark bookRemark,
    u.id userId,u.name UserName,u.sex UserSex,u.age UserAge,u.phone UserPhone,u.new_date UserNewDate,
    u.out_date UserOutDate,u.place UserPlace,u.borrow_num borrowNum,u.password UserPassword
    from book b,user u,borrow w
    where b.id=w.book_id and w.user_id=u.id limit #{page},#{size};
  </select>
  <select id="queryAll" resultType="com.ambow.first.vo.BorrowBookUserVo">
    select w.id borrowId,w.borrow_date borrowDate,w.s_r_date borrowSrdate,w.s_r_time_stamp borrowSrtimeStamp,
    w.status borrowStatus,b.id bookId,b.book_name bookName,b.author_name bookAuthorName,b.press bookPress,
    b.publish_date bookPublishDate,b.info bookInfo,b.status bookStatus,b.num bookNum,b.remark bookRemark,
    u.id userId,u.name UserName,u.sex UserSex,u.age UserAge,u.phone UserPhone,u.new_date UserNewDate,
    u.out_date UserOutDate,u.place UserPlace,u.borrow_num borrowNum,u.password UserPassword
    from book b,user u,borrow w
    where b.id=w.book_id and w.user_id=u.id;
  </select>

  <!--借阅列表模糊查询-->
  <select id="selectBorrowLike"  resultType="com.ambow.first.vo.BorrowBookUserVo">
    select w.id borrowId,w.borrow_date borrowDate,w.s_r_date borrowSrdate,w.s_r_time_stamp borrowSrtimeStamp,
    w.status borrowStatus,b.id bookId,b.book_name bookName,b.author_name bookAuthorName,b.press bookPress,
    b.publish_date bookPublishDate,b.info bookInfo,b.status bookStatus,b.num bookNum,b.remark bookRemark,
    u.id userId,u.name UserName,u.sex UserSex,u.age UserAge,u.phone UserPhone,u.new_date UserNewDate,
    u.out_date UserOutDate,u.place UserPlace,u.borrow_num borrowNum,u.password UserPassword
    from book b,user u,borrow w
    where b.id=w.book_id and w.user_id=u.id
    and(b.book_name like #{mohu} or u.phone like #{mohu} or u.name like #{mohu}) limit #{page},#{size};
  </select>
  <!--统计全查的分页的统计条目-->
  <select id="selectAllCount" resultType="java.lang.Integer">
    select count(*)
    from book b,user u,borrow w
    where b.id=w.book_id and w.user_id=u.id;
  </select>
  <!--统计模糊分页查询的总条目-->
  <select id="selectAllCountLike" resultType="java.lang.Integer">

    select count(*)
    from book b,user u,borrow w
    where b.id=w.book_id and  w.user_id=u.id
    and(b.book_name like #{mohu} or u.phone like #{mohu} or u.name like #{mohu});

  </select>
  <!--根据bookID查找应当还书时间戳-->
  <select id="getByBookId" parameterType="java.lang.String" resultType="borrow">
    select
    s_r_time_stamp,id,user_id from borrow
    where book_id = #{bookId,jdbcType=VARCHAR}
  </select>
  <!--全查borrow表-->
</mapper>