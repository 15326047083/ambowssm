<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ambow.first.dao.BookMapper">
    <resultMap id="BaseResultMap" type="com.ambow.first.entity.Book">
        <id column="id" property="id" jdbcType="VARCHAR"/>
        <result column="type_id" property="typeId" jdbcType="VARCHAR"/>
        <result column="book_name" property="bookName" jdbcType="VARCHAR"/>
        <result column="author_name" property="authorName" jdbcType="VARCHAR"/>
        <result column="press" property="press" jdbcType="VARCHAR"/>
        <result column="publish_date" property="publishDate" jdbcType="TIMESTAMP"/>
        <result column="info" property="info" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="num" property="num" jdbcType="INTEGER"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, type_id, book_name, author_name, press, publish_date, info, status, num, remark
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        from book
        where id = #{id,jdbcType=VARCHAR}
    </select>

    <select id="selectAlllBook" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from book

    </select>

    <!--全查vo-->
    <select id="getBookTypeVoList" resultType="com.ambow.first.vo.BookTypeVo">
    select t.id typeId,t.name typeName,t.place typePlace,t.book_num bookNum,b.id bookId,b.book_name bookName,b.author_name bookAuthorName,
    b.press bookPress,b.publish_date bookPublishDate,b.info bookInfo,b.status bookStatus,b.num bookBorrowNum,b.remark bookRemark
    from book b,type t where t.id=b.type_id limit #{page},#{size};
  </select>


    <!--Vo总数量-->

    <select id="getBookTypeVoListNum" resultType="java.lang.Integer">
    select count(*)
    from book b,type t where t.id=b.type_id;
    </select>


    <!--图书类型-->

    <select id="getBookTypeVoByTypeId" resultType="com.ambow.first.vo.BookTypeVo">
    select t.id typeId,t.name typeName,t.place typePlace,t.book_num bookNum,b.id bookId,b.book_name bookName,b.author_name bookAuthorName,
    b.press bookPress,b.publish_date bookPublishDate,b.info bookInfo,b.status bookStatus,b.num bookBorrowNum,b.remark bookRemark
    from book b,type t where t.id=b.type_id and t.id=#{typeId}  limit #{page},#{size};
  </select>


    <!--根据类型Id图书类型数量-->

    <select id="getBookTypeVoByTypeIdNum" parameterType="java.lang.String" resultType="java.lang.Integer">
    select count(*)
    from book b,type t where t.id=b.type_id and t.id=#{typeId};
  </select>

    <!--总模糊-->

    <select id="selectByLike" resultMap="com.ambow.first.vo.BookTypeVo" parameterType="java.lang.String">
        select t.id typeId,t.name typeName,t.place typePlace,t.book_num bookNum,b.id bookId,b.book_name bookName,b.author_name bookAuthorName,
    b.press bookPress,b.publish_date bookPublishDate,b.info bookInfo,b.status bookStatus,b.num bookBorrowNum,b.remark bookRemark
    from book b,type t where t.id=b.type_id
       and (book_name like #{blur} or author_name like #{blur} or press like #{blur} or info like #{blur}) limit #{page},#{size};
    </select>


    <!--总模糊的数量-->
    <select id="selectByLikeNum" resultMap="java.lang.Integer" parameterType="java.lang.String">
        select count(*)
    from book b,type t where t.id=b.type_id
       and (book_name like #{blur} or author_name like #{blur} or press like #{blur} or info like #{blur}) ;
    </select>

    <!--分类下的模糊查询-->


    <select id="getBookTypeVoByTypeIAndLike" resultType="com.ambow.first.vo.BookTypeVo">
    select t.id typeId,t.name typeName,t.place typePlace,t.book_num bookNum,b.id bookId,b.book_name bookName,b.author_name bookAuthorName,
    b.press bookPress,b.publish_date bookPublishDate,b.info bookInfo,b.status bookStatus,b.num bookBorrowNum,b.remark bookRemark
    from book b,type t where t.id=b.type_id and t.id=#{typeId} and ( b.book_name like #{blur} or b.author_name like #{blur} or b.press like #{blur} or b.info like #{blur} ) limit #{page},#{size} ;
  </select>

    <!--分类下的模糊查询的数量-->
    <select id="getBookTypeVoByTypeIAndLikeNum" resultType="java.lang.Integer">
    select count(*)
    from book b,type t where t.id=b.type_id and t.id=#{typeId} and ( b.book_name like #{blur} or b.author_name like #{blur} or b.press like #{blur} or b.info like #{blur} )  ;
  </select>
    <!--借阅排行-->

    <select id="getBookTypeVoByTypeIdSort" resultType="com.ambow.first.vo.BookTypeVo">
    select  SUM(b.num) as bookBorrowNum,t.id typeId,t.name typeName,t.place typePlace,t.book_num bookNum,b.id bookId,b.book_name bookName,b.author_name bookAuthorName,
    b.press bookPress,b.publish_date bookPublishDate,b.info bookInfo,b.status bookStatus,b.remark bookRemark
    from book b,type t where t.id=b.type_id  group by b.book_name order by bookBorrowNum DESC limit #{page},#{size};
  </select>
    //todo
    <!--借阅排行数量-->
    <select id="getBookTypeVoByTypeIdSortNum">
    select  count (*),SUM(b.num) as bookBorrowNum,b.book_name bookName
    from book b,type t where t.id=b.type_id  group by b.book_name order by bookBorrowNum DESC ;
  </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from book
    where id = #{id,jdbcType=VARCHAR}
  </delete>
    <insert id="insert" parameterType="com.ambow.first.entity.Book">
    insert into book (id, type_id, book_name, 
      author_name, press, publish_date, 
      info, status, num, 
      remark)
    values (#{id,jdbcType=VARCHAR}, #{typeId,jdbcType=VARCHAR}, #{bookName,jdbcType=VARCHAR}, 
      #{authorName,jdbcType=VARCHAR}, #{press,jdbcType=VARCHAR}, #{publishDate,jdbcType=TIMESTAMP}, 
      #{info,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, #{num,jdbcType=INTEGER}, 
      #{remark,jdbcType=VARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.ambow.first.entity.Book">
        insert into book
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="typeId != null">
                type_id,
            </if>
            <if test="bookName != null">
                book_name,
            </if>
            <if test="authorName != null">
                author_name,
            </if>
            <if test="press != null">
                press,
            </if>
            <if test="publishDate != null">
                publish_date,
            </if>
            <if test="info != null">
                info,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="num != null">
                num,
            </if>
            <if test="remark != null">
                remark,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=VARCHAR},
            </if>
            <if test="typeId != null">
                #{typeId,jdbcType=VARCHAR},
            </if>
            <if test="bookName != null">
                #{bookName,jdbcType=VARCHAR},
            </if>
            <if test="authorName != null">
                #{authorName,jdbcType=VARCHAR},
            </if>
            <if test="press != null">
                #{press,jdbcType=VARCHAR},
            </if>
            <if test="publishDate != null">
                #{publishDate,jdbcType=TIMESTAMP},
            </if>
            <if test="info != null">
                #{info,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="num != null">
                #{num,jdbcType=INTEGER},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.ambow.first.entity.Book">
        update book
        <set>
            <if test="typeId != null">
                type_id = #{typeId,jdbcType=VARCHAR},
            </if>
            <if test="bookName != null">
                book_name = #{bookName,jdbcType=VARCHAR},
            </if>
            <if test="authorName != null">
                author_name = #{authorName,jdbcType=VARCHAR},
            </if>
            <if test="press != null">
                press = #{press,jdbcType=VARCHAR},
            </if>
            <if test="publishDate != null">
                publish_date = #{publishDate,jdbcType=TIMESTAMP},
            </if>
            <if test="info != null">
                info = #{info,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="num != null">
                num = #{num,jdbcType=INTEGER},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=VARCHAR}
    </update>

    <update id="updateByPrimaryKey" parameterType="com.ambow.first.entity.Book">
    update book
    set type_id = #{typeId,jdbcType=VARCHAR},
      book_name = #{bookName,jdbcType=VARCHAR},
      author_name = #{authorName,jdbcType=VARCHAR},
      press = #{press,jdbcType=VARCHAR},
      publish_date = #{publishDate,jdbcType=TIMESTAMP},
      info = #{info,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      num = #{num,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>